// Code generated by MockGen. DO NOT EDIT.
// Source: proto/search/search_grpc.pb.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	search "yadro.com/course/proto/search"
)

// MockSearchClient is a mock of SearchClient interface.
type MockSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSearchClientMockRecorder
}

// MockSearchClientMockRecorder is the mock recorder for MockSearchClient.
type MockSearchClientMockRecorder struct {
	mock *MockSearchClient
}

// NewMockSearchClient creates a new mock instance.
func NewMockSearchClient(ctrl *gomock.Controller) *MockSearchClient {
	mock := &MockSearchClient{ctrl: ctrl}
	mock.recorder = &MockSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchClient) EXPECT() *MockSearchClientMockRecorder {
	return m.recorder
}

// IndexSearch mocks base method.
func (m *MockSearchClient) IndexSearch(ctx context.Context, in *search.IndexSearchRequest, opts ...grpc.CallOption) (*search.SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexSearch", varargs...)
	ret0, _ := ret[0].(*search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexSearch indicates an expected call of IndexSearch.
func (mr *MockSearchClientMockRecorder) IndexSearch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexSearch", reflect.TypeOf((*MockSearchClient)(nil).IndexSearch), varargs...)
}

// Ping mocks base method.
func (m *MockSearchClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockSearchClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSearchClient)(nil).Ping), varargs...)
}

// Search mocks base method.
func (m *MockSearchClient) Search(ctx context.Context, in *search.SearchRequest, opts ...grpc.CallOption) (*search.SearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchClientMockRecorder) Search(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchClient)(nil).Search), varargs...)
}

// MockSearchServer is a mock of SearchServer interface.
type MockSearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServerMockRecorder
}

// MockSearchServerMockRecorder is the mock recorder for MockSearchServer.
type MockSearchServerMockRecorder struct {
	mock *MockSearchServer
}

// NewMockSearchServer creates a new mock instance.
func NewMockSearchServer(ctrl *gomock.Controller) *MockSearchServer {
	mock := &MockSearchServer{ctrl: ctrl}
	mock.recorder = &MockSearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchServer) EXPECT() *MockSearchServerMockRecorder {
	return m.recorder
}

// IndexSearch mocks base method.
func (m *MockSearchServer) IndexSearch(arg0 context.Context, arg1 *search.IndexSearchRequest) (*search.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexSearch", arg0, arg1)
	ret0, _ := ret[0].(*search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexSearch indicates an expected call of IndexSearch.
func (mr *MockSearchServerMockRecorder) IndexSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexSearch", reflect.TypeOf((*MockSearchServer)(nil).IndexSearch), arg0, arg1)
}

// Ping mocks base method.
func (m *MockSearchServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockSearchServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSearchServer)(nil).Ping), arg0, arg1)
}

// Search mocks base method.
func (m *MockSearchServer) Search(arg0 context.Context, arg1 *search.SearchRequest) (*search.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*search.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchServerMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchServer)(nil).Search), arg0, arg1)
}

// mustEmbedUnimplementedSearchServer mocks base method.
func (m *MockSearchServer) mustEmbedUnimplementedSearchServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSearchServer")
}

// mustEmbedUnimplementedSearchServer indicates an expected call of mustEmbedUnimplementedSearchServer.
func (mr *MockSearchServerMockRecorder) mustEmbedUnimplementedSearchServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSearchServer", reflect.TypeOf((*MockSearchServer)(nil).mustEmbedUnimplementedSearchServer))
}

// MockUnsafeSearchServer is a mock of UnsafeSearchServer interface.
type MockUnsafeSearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSearchServerMockRecorder
}

// MockUnsafeSearchServerMockRecorder is the mock recorder for MockUnsafeSearchServer.
type MockUnsafeSearchServerMockRecorder struct {
	mock *MockUnsafeSearchServer
}

// NewMockUnsafeSearchServer creates a new mock instance.
func NewMockUnsafeSearchServer(ctrl *gomock.Controller) *MockUnsafeSearchServer {
	mock := &MockUnsafeSearchServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSearchServer) EXPECT() *MockUnsafeSearchServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSearchServer mocks base method.
func (m *MockUnsafeSearchServer) mustEmbedUnimplementedSearchServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSearchServer")
}

// mustEmbedUnimplementedSearchServer indicates an expected call of mustEmbedUnimplementedSearchServer.
func (mr *MockUnsafeSearchServerMockRecorder) mustEmbedUnimplementedSearchServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSearchServer", reflect.TypeOf((*MockUnsafeSearchServer)(nil).mustEmbedUnimplementedSearchServer))
}
