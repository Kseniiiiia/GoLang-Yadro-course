// Code generated by MockGen. DO NOT EDIT.
// Source: proto/update/update_grpc.pb.go

// Package mock_update is a generated GoMock package.
package mock_update

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	update "yadro.com/course/proto/update"
)

// MockUpdateClient is a mock of UpdateClient interface.
type MockUpdateClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateClientMockRecorder
}

// MockUpdateClientMockRecorder is the mock recorder for MockUpdateClient.
type MockUpdateClientMockRecorder struct {
	mock *MockUpdateClient
}

// NewMockUpdateClient creates a new mock instance.
func NewMockUpdateClient(ctrl *gomock.Controller) *MockUpdateClient {
	mock := &MockUpdateClient{ctrl: ctrl}
	mock.recorder = &MockUpdateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateClient) EXPECT() *MockUpdateClientMockRecorder {
	return m.recorder
}

// Drop mocks base method.
func (m *MockUpdateClient) Drop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Drop", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Drop indicates an expected call of Drop.
func (mr *MockUpdateClientMockRecorder) Drop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockUpdateClient)(nil).Drop), varargs...)
}

// Ping mocks base method.
func (m *MockUpdateClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockUpdateClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockUpdateClient)(nil).Ping), varargs...)
}

// Stats mocks base method.
func (m *MockUpdateClient) Stats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*update.StatsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stats", varargs...)
	ret0, _ := ret[0].(*update.StatsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockUpdateClientMockRecorder) Stats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockUpdateClient)(nil).Stats), varargs...)
}

// Status mocks base method.
func (m *MockUpdateClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*update.StatusReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*update.StatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockUpdateClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUpdateClient)(nil).Status), varargs...)
}

// Update mocks base method.
func (m *MockUpdateClient) Update(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUpdateClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateClient)(nil).Update), varargs...)
}

// MockUpdateServer is a mock of UpdateServer interface.
type MockUpdateServer struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateServerMockRecorder
}

// MockUpdateServerMockRecorder is the mock recorder for MockUpdateServer.
type MockUpdateServerMockRecorder struct {
	mock *MockUpdateServer
}

// NewMockUpdateServer creates a new mock instance.
func NewMockUpdateServer(ctrl *gomock.Controller) *MockUpdateServer {
	mock := &MockUpdateServer{ctrl: ctrl}
	mock.recorder = &MockUpdateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateServer) EXPECT() *MockUpdateServerMockRecorder {
	return m.recorder
}

// Drop mocks base method.
func (m *MockUpdateServer) Drop(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Drop indicates an expected call of Drop.
func (mr *MockUpdateServerMockRecorder) Drop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockUpdateServer)(nil).Drop), arg0, arg1)
}

// Ping mocks base method.
func (m *MockUpdateServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockUpdateServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockUpdateServer)(nil).Ping), arg0, arg1)
}

// Stats mocks base method.
func (m *MockUpdateServer) Stats(arg0 context.Context, arg1 *emptypb.Empty) (*update.StatsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(*update.StatsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockUpdateServerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockUpdateServer)(nil).Stats), arg0, arg1)
}

// Status mocks base method.
func (m *MockUpdateServer) Status(arg0 context.Context, arg1 *emptypb.Empty) (*update.StatusReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*update.StatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockUpdateServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUpdateServer)(nil).Status), arg0, arg1)
}

// Update mocks base method.
func (m *MockUpdateServer) Update(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUpdateServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedUpdateServer mocks base method.
func (m *MockUpdateServer) mustEmbedUnimplementedUpdateServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUpdateServer")
}

// mustEmbedUnimplementedUpdateServer indicates an expected call of mustEmbedUnimplementedUpdateServer.
func (mr *MockUpdateServerMockRecorder) mustEmbedUnimplementedUpdateServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUpdateServer", reflect.TypeOf((*MockUpdateServer)(nil).mustEmbedUnimplementedUpdateServer))
}

// MockUnsafeUpdateServer is a mock of UnsafeUpdateServer interface.
type MockUnsafeUpdateServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUpdateServerMockRecorder
}

// MockUnsafeUpdateServerMockRecorder is the mock recorder for MockUnsafeUpdateServer.
type MockUnsafeUpdateServerMockRecorder struct {
	mock *MockUnsafeUpdateServer
}

// NewMockUnsafeUpdateServer creates a new mock instance.
func NewMockUnsafeUpdateServer(ctrl *gomock.Controller) *MockUnsafeUpdateServer {
	mock := &MockUnsafeUpdateServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUpdateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUpdateServer) EXPECT() *MockUnsafeUpdateServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUpdateServer mocks base method.
func (m *MockUnsafeUpdateServer) mustEmbedUnimplementedUpdateServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUpdateServer")
}

// mustEmbedUnimplementedUpdateServer indicates an expected call of mustEmbedUnimplementedUpdateServer.
func (mr *MockUnsafeUpdateServerMockRecorder) mustEmbedUnimplementedUpdateServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUpdateServer", reflect.TypeOf((*MockUnsafeUpdateServer)(nil).mustEmbedUnimplementedUpdateServer))
}
