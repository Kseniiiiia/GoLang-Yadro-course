// Code generated by MockGen. DO NOT EDIT.
// Source: proto/words/words_grpc.pb.go

// Package mock_words is a generated GoMock package.
package mock_words

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	words "yadro.com/course/proto/words"
)

// MockWordsClient is a mock of WordsClient interface.
type MockWordsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWordsClientMockRecorder
}

// MockWordsClientMockRecorder is the mock recorder for MockWordsClient.
type MockWordsClientMockRecorder struct {
	mock *MockWordsClient
}

// NewMockWordsClient creates a new mock instance.
func NewMockWordsClient(ctrl *gomock.Controller) *MockWordsClient {
	mock := &MockWordsClient{ctrl: ctrl}
	mock.recorder = &MockWordsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordsClient) EXPECT() *MockWordsClientMockRecorder {
	return m.recorder
}

// Norm mocks base method.
func (m *MockWordsClient) Norm(ctx context.Context, in *words.WordsRequest, opts ...grpc.CallOption) (*words.WordsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Norm", varargs...)
	ret0, _ := ret[0].(*words.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Norm indicates an expected call of Norm.
func (mr *MockWordsClientMockRecorder) Norm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Norm", reflect.TypeOf((*MockWordsClient)(nil).Norm), varargs...)
}

// Ping mocks base method.
func (m *MockWordsClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockWordsClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWordsClient)(nil).Ping), varargs...)
}

// MockWordsServer is a mock of WordsServer interface.
type MockWordsServer struct {
	ctrl     *gomock.Controller
	recorder *MockWordsServerMockRecorder
}

// MockWordsServerMockRecorder is the mock recorder for MockWordsServer.
type MockWordsServerMockRecorder struct {
	mock *MockWordsServer
}

// NewMockWordsServer creates a new mock instance.
func NewMockWordsServer(ctrl *gomock.Controller) *MockWordsServer {
	mock := &MockWordsServer{ctrl: ctrl}
	mock.recorder = &MockWordsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordsServer) EXPECT() *MockWordsServerMockRecorder {
	return m.recorder
}

// Norm mocks base method.
func (m *MockWordsServer) Norm(arg0 context.Context, arg1 *words.WordsRequest) (*words.WordsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Norm", arg0, arg1)
	ret0, _ := ret[0].(*words.WordsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Norm indicates an expected call of Norm.
func (mr *MockWordsServerMockRecorder) Norm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Norm", reflect.TypeOf((*MockWordsServer)(nil).Norm), arg0, arg1)
}

// Ping mocks base method.
func (m *MockWordsServer) Ping(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockWordsServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockWordsServer)(nil).Ping), arg0, arg1)
}

// mustEmbedUnimplementedWordsServer mocks base method.
func (m *MockWordsServer) mustEmbedUnimplementedWordsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWordsServer")
}

// mustEmbedUnimplementedWordsServer indicates an expected call of mustEmbedUnimplementedWordsServer.
func (mr *MockWordsServerMockRecorder) mustEmbedUnimplementedWordsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWordsServer", reflect.TypeOf((*MockWordsServer)(nil).mustEmbedUnimplementedWordsServer))
}

// MockUnsafeWordsServer is a mock of UnsafeWordsServer interface.
type MockUnsafeWordsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWordsServerMockRecorder
}

// MockUnsafeWordsServerMockRecorder is the mock recorder for MockUnsafeWordsServer.
type MockUnsafeWordsServerMockRecorder struct {
	mock *MockUnsafeWordsServer
}

// NewMockUnsafeWordsServer creates a new mock instance.
func NewMockUnsafeWordsServer(ctrl *gomock.Controller) *MockUnsafeWordsServer {
	mock := &MockUnsafeWordsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWordsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWordsServer) EXPECT() *MockUnsafeWordsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWordsServer mocks base method.
func (m *MockUnsafeWordsServer) mustEmbedUnimplementedWordsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWordsServer")
}

// mustEmbedUnimplementedWordsServer indicates an expected call of mustEmbedUnimplementedWordsServer.
func (mr *MockUnsafeWordsServerMockRecorder) mustEmbedUnimplementedWordsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWordsServer", reflect.TypeOf((*MockUnsafeWordsServer)(nil).mustEmbedUnimplementedWordsServer))
}
