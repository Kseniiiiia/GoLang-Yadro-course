// Code generated by MockGen. DO NOT EDIT.
// Source: search/core/ports.go

// Package mock_core is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "yadro.com/course/search/core"
)

// MockSearcher is a mock of Searcher interface.
type MockSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockSearcherMockRecorder
}

// MockSearcherMockRecorder is the mock recorder for MockSearcher.
type MockSearcherMockRecorder struct {
	mock *MockSearcher
}

// NewMockSearcher creates a new mock instance.
func NewMockSearcher(ctrl *gomock.Controller) *MockSearcher {
	mock := &MockSearcher{ctrl: ctrl}
	mock.recorder = &MockSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearcher) EXPECT() *MockSearcherMockRecorder {
	return m.recorder
}

// IndexSearch mocks base method.
func (m *MockSearcher) IndexSearch(ctx context.Context, phrase string, limit int) (core.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexSearch", ctx, phrase, limit)
	ret0, _ := ret[0].(core.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexSearch indicates an expected call of IndexSearch.
func (mr *MockSearcherMockRecorder) IndexSearch(ctx, phrase, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexSearch", reflect.TypeOf((*MockSearcher)(nil).IndexSearch), ctx, phrase, limit)
}

// Search mocks base method.
func (m *MockSearcher) Search(ctx context.Context, phrase string, limit int) (core.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, phrase, limit)
	ret0, _ := ret[0].(core.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearcherMockRecorder) Search(ctx, phrase, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearcher)(nil).Search), ctx, phrase, limit)
}

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// BuildIndex mocks base method.
func (m *MockIndexer) BuildIndex(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildIndex", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildIndex indicates an expected call of BuildIndex.
func (mr *MockIndexerMockRecorder) BuildIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildIndex", reflect.TypeOf((*MockIndexer)(nil).BuildIndex), ctx)
}

// GetIndex mocks base method.
func (m *MockIndexer) GetIndex(ctx context.Context) core.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", ctx)
	ret0, _ := ret[0].(core.Index)
	return ret0
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockIndexerMockRecorder) GetIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockIndexer)(nil).GetIndex), ctx)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AllComics mocks base method.
func (m *MockDB) AllComics(ctx context.Context) ([]core.Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllComics", ctx)
	ret0, _ := ret[0].([]core.Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllComics indicates an expected call of AllComics.
func (mr *MockDBMockRecorder) AllComics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllComics", reflect.TypeOf((*MockDB)(nil).AllComics), ctx)
}

// GetComicsByIDs mocks base method.
func (m *MockDB) GetComicsByIDs(ctx context.Context, ids []int) ([]core.Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComicsByIDs", ctx, ids)
	ret0, _ := ret[0].([]core.Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComicsByIDs indicates an expected call of GetComicsByIDs.
func (mr *MockDBMockRecorder) GetComicsByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComicsByIDs", reflect.TypeOf((*MockDB)(nil).GetComicsByIDs), ctx, ids)
}

// SearchComics mocks base method.
func (m *MockDB) SearchComics(ctx context.Context, words []string, limit int) ([]core.Comics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchComics", ctx, words, limit)
	ret0, _ := ret[0].([]core.Comics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchComics indicates an expected call of SearchComics.
func (mr *MockDBMockRecorder) SearchComics(ctx, words, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchComics", reflect.TypeOf((*MockDB)(nil).SearchComics), ctx, words, limit)
}

// Stats mocks base method.
func (m *MockDB) Stats(ctx context.Context) (core.DBStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", ctx)
	ret0, _ := ret[0].(core.DBStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockDBMockRecorder) Stats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockDB)(nil).Stats), ctx)
}
