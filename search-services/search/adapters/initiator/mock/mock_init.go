// Code generated by MockGen. DO NOT EDIT.
// Source: search/core/ports.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "yadro.com/course/search/core"
)

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// BuildIndex mocks base method.
func (m *MockIndexer) BuildIndex(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildIndex", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildIndex indicates an expected call of BuildIndex.
func (mr *MockIndexerMockRecorder) BuildIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildIndex", reflect.TypeOf((*MockIndexer)(nil).BuildIndex), ctx)
}

// GetIndex mocks base method.
func (m *MockIndexer) GetIndex(ctx context.Context) core.Index {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", ctx)
	ret0, _ := ret[0].(core.Index)
	return ret0
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockIndexerMockRecorder) GetIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockIndexer)(nil).GetIndex), ctx)
}
